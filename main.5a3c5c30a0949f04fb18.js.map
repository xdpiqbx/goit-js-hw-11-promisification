{"version":3,"sources":["webpack:///./js/task-02.js","webpack:///./js/task-03.js","webpack:///./js/task-01.js"],"names":["users","name","active","toggleUserState","allUsers","userName","Promise","resolve","reject","map","user","logger","updatedUsers","console","table","then","makeTransaction","transaction","min","max","delay","Math","floor","random","setTimeout","id","logSuccess","args","log","logError","warn","amount","catch","require","ms","time"],"mappings":"mMAKMA,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAyBrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBD,EAAQH,EAASK,KAAI,SAAAC,GAAI,OAAIA,EAAKT,OAASI,EAAd,iBAA8BK,EAA9B,CAAoCR,QAASQ,EAAKR,SAAWQ,UAI5FC,EAAS,SAAAC,GAAY,OAAIC,QAAQC,MAAMF,IAE7CT,EAAgBH,EAAO,SAASe,KAAKJ,GACrCR,EAAgBH,EAAO,OAAOe,KAAKJ,GCtCnC,IAIMK,EAAkB,SAACC,GAEzB,IANmCC,EAAKC,EAMlCC,GAN6BF,EAMK,IANAC,EAMK,IALpCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAMtD,OAAO,IAAIZ,SAAQ,SAACC,EAASC,GAC3BgB,YAAW,WACUH,KAAKE,SAAW,GAEjChB,EAAS,CAACU,EAAYQ,GAAIL,IAE1BZ,EAAOS,EAAYQ,MAEpBL,OAICM,EAAa,SAACC,GAClBd,QAAQe,IAAR,eAA2BD,EAAK,GAAhC,iBAAmDA,EAAK,GAAxD,QAGIE,EAAW,SAAAJ,GACfZ,QAAQiB,KAAR,gCAA6CL,EAA7C,8BAKFT,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MACjChB,KAAKW,GACLM,MAAMH,GAEPb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MACjChB,KAAKW,GACLM,MAAMH,GAEPb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,KACjChB,KAAKW,GACLM,MAAMH,GAEPb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MACjChB,KAAKW,GACLM,MAAMH,I,yBC9CCvB,EAAY2B,EAAQ,QAApB3B,QAOFc,EAAQ,SAAAc,GACV,OAAO,IAAI5B,GAAQ,SAACC,EAASC,GACzBgB,YAAW,WACPjB,EAAQ2B,KACTA,OAILvB,EAAS,SAAAwB,GAAI,OAAItB,QAAQe,IAAR,kBAA8BO,EAA9B,OAGvBf,EAAM,KAAML,KAAKJ,GACjBS,EAAM,KAAML,KAAKJ,GACjBS,EAAM,MAAML,KAAKJ,K","file":"main.5a3c5c30a0949f04fb18.js","sourcesContent":["/*\r\nПерепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\r\nа принимала всего два параметра allUsers и userName и возвращала промис.\r\n*/\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n// const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n// );\r\n\r\n// callback(updatedUsers);\r\n// };\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// /*\r\n// * Сейчас работает так\r\n// */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n// /*\r\n// * Должно работать так\r\n// */\r\n// toggleUserState(users, 'Mango').then(logger);\r\n// toggleUserState(users, 'Lux').then(logger);\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve(allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user))\r\n    })\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","/*\r\nПерепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\r\nа принимала всего один параметр transaction и возвращала промис.\r\n*/\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  \r\nconst delay = randomIntegerFromInterval(200, 500);\r\nreturn new Promise((resolve, reject)=>{\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n    if (canProcess) {\r\n      resolve( [transaction.id, delay] );\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n})\r\n};\r\n\r\nconst logSuccess = (args) => {\r\n  console.log(`Transaction ${args[0]} processed in ${args[1]} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n.then(logSuccess)\r\n.catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n.then(logSuccess)\r\n.catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n.then(logSuccess)\r\n.catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n.then(logSuccess)\r\n.catch(logError);","//https://github.com/goitacademy/javascript-homework/tree/master/homework-11/promisification\r\n\r\nconst { Promise } = require(\"core-js\");\r\n\r\n/*\r\nНапиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\r\nЗначением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n*/\r\n\r\nconst delay = ms => {\r\n    return new Promise((resolve, reject)=>{\r\n        setTimeout(()=>{\r\n            resolve(ms);\r\n        }, ms)\r\n    });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms"],"sourceRoot":""}